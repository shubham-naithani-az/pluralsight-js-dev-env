"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _textTable = _interopRequireDefault(require("text-table"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _characters = _interopRequireDefault(require("./helpers/characters"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Template Author Sindre Sorhus @eslint
// https://github.com/sindresorhus/eslint-stylish
const logger = (0, _logger.default)('simple-detail');
logger.debug('loaded');
let tableSettings = {
  align: ['', '', 'r'],
  stringLength: str => (0, _stripAnsi.default)(str).length
};

function pluralize(word, count) {
  return count === 1 ? word : word + 's';
}

function simpleDetail(results) {
  let totalErrors = 0;
  let totalWarnings = 0;
  let output = '';
  let cleanMsg = '';

  let messageTime = _chalk.default.dim(`(${new Date().toLocaleTimeString()})`);

  logger.debug(results);
  results.forEach(function (result) {
    let messages = result.messages;
    let warnings = 0;
    let errors = 0;

    if (!messages.length) {
      return;
    }

    const tableContents = messages.map(function (message) {
      function getMessageType(msg) {
        if (msg.fatal || msg.severity === 2) {
          totalErrors++;
          errors++;
          return _chalk.default.red(_characters.default.x);
        }

        totalWarnings++;
        warnings++;
        return _chalk.default.yellow(_characters.default.ex);
      }

      return ['', getMessageType(message), message.line || 0, message.column || 0, _chalk.default.dim(message.message.replace(/\.$/, '')), _chalk.default.dim(message.ruleId || '')];
    });
    const tableText = (0, _textTable.default)(tableContents, tableSettings);
    output += _chalk.default.white.underline(result.filePath) + ` (${_chalk.default.red(errors)}/${_chalk.default.yellow(warnings)})${_characters.default.endLine}`;
    output += tableText.split(_characters.default.endLine).map(function (el) {
      return el.replace(/(\d+)\s+(\d+)/, (m, p1, p2) => _chalk.default.dim(`${p1}:${p2}`));
    }).join(_characters.default.endLine) + _characters.default.endLine + _characters.default.endLine;
  });

  if (totalErrors) {
    output += _chalk.default.red(`${_characters.default.x} ${totalErrors} ${pluralize('error', totalErrors)} `);
  }

  if (totalWarnings) {
    output += _chalk.default.yellow(`${_characters.default.ex} ${totalWarnings} ${pluralize('warning', totalWarnings)} `);
  }

  if (results.length > 0 || !results.length) {
    cleanMsg = _chalk.default.green(`${_characters.default.check} Clean`) + ` ${messageTime}`;
  }

  output = totalErrors || totalWarnings ? `${output}${messageTime}${_characters.default.endLine}` : cleanMsg;
  return output;
}

var _default = simpleDetail;
exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3NpbXBsZS1kZXRhaWwuanMiXSwibmFtZXMiOlsibG9nZ2VyIiwiZGVidWciLCJ0YWJsZVNldHRpbmdzIiwiYWxpZ24iLCJzdHJpbmdMZW5ndGgiLCJzdHIiLCJsZW5ndGgiLCJwbHVyYWxpemUiLCJ3b3JkIiwiY291bnQiLCJzaW1wbGVEZXRhaWwiLCJyZXN1bHRzIiwidG90YWxFcnJvcnMiLCJ0b3RhbFdhcm5pbmdzIiwib3V0cHV0IiwiY2xlYW5Nc2ciLCJtZXNzYWdlVGltZSIsImNoYWxrIiwiZGltIiwiRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsImZvckVhY2giLCJyZXN1bHQiLCJtZXNzYWdlcyIsIndhcm5pbmdzIiwiZXJyb3JzIiwidGFibGVDb250ZW50cyIsIm1hcCIsIm1lc3NhZ2UiLCJnZXRNZXNzYWdlVHlwZSIsIm1zZyIsImZhdGFsIiwic2V2ZXJpdHkiLCJyZWQiLCJjIiwieCIsInllbGxvdyIsImV4IiwibGluZSIsImNvbHVtbiIsInJlcGxhY2UiLCJydWxlSWQiLCJ0YWJsZVRleHQiLCJ3aGl0ZSIsInVuZGVybGluZSIsImZpbGVQYXRoIiwiZW5kTGluZSIsInNwbGl0IiwiZWwiLCJtIiwicDEiLCJwMiIsImpvaW4iLCJncmVlbiIsImNoZWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFQQTtBQUNBO0FBUUEsTUFBTUEsU0FBUyxxQkFBTyxlQUFQLENBQWY7QUFFQUEsT0FBT0MsS0FBUCxDQUFhLFFBQWI7QUFFQSxJQUFJQyxnQkFBZ0I7QUFDbEJDLFNBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEdBQVQsQ0FEVztBQUVsQkMsZ0JBQWVDLEdBQUQsSUFBUyx3QkFBTUEsR0FBTixFQUFXQztBQUZoQixDQUFwQjs7QUFLQSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsU0FBUUEsVUFBVSxD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LE1BQW5DLEVBQTJDO0FBQ3pDUyxlQUFXRSxlQUFNb0MsS0FBTixDQUFhLEdBQUVuQixvQkFBRW9CLEtBQU0sUUFBdkIsSUFBbUMsSUFBR3RDLFdBQVksRUFBN0Q7QUFDRDs7QUFFREYsV0FBVUYsZUFBZUMsYUFBaEIsR0FDSixHQUFFQyxNQUFPLEdBQUVFLFdBQVksR0FBRWtCLG9CQUFFWSxPQUFRLEVBRC9CLEdBRUwvQixRQUZKO0FBSUEsU0FBT0QsTUFBUDtBQUNEOztlQUVjSixZIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGVtcGxhdGUgQXV0aG9yIFNpbmRyZSBTb3JodXMgQGVzbGludFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2xpbnQtc3R5bGlzaFxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCB0YWJsZSBmcm9tICd0ZXh0LXRhYmxlJztcbmltcG9ydCBzdHJpcCBmcm9tICdzdHJpcC1hbnNpJztcblxuaW1wb3J0IGMgZnJvbSAnLi9oZWxwZXJzL2NoYXJhY3RlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBsb2dnZXIgPSBMb2dnZXIoJ3NpbXBsZS1kZXRhaWwnKTtcblxubG9nZ2VyLmRlYnVnKCdsb2FkZWQnKTtcblxubGV0IHRhYmxlU2V0dGluZ3MgPSB7XG4gIGFsaWduOiBbJycsICcnLCAnciddLFxuICBzdHJpbmdMZW5ndGg6IChzdHIpID0+IHN0cmlwKHN0cikubGVuZ3RoXG59O1xuXG5mdW5jdGlvbiBwbHVyYWxpemUod29yZCwgY291bnQpIHtcbiAgcmV0dXJuIChjb3VudCA9PT0gMSA/IHdvcmQgOiB3b3JkICsgJ3MnKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRGV0YWlsKHJlc3VsdHMpIHtcbiAgbGV0IHRvdGFsRXJyb3JzID0gMDtcbiAgbGV0IHRvdGFsV2FybmluZ3MgPSAwO1xuICBsZXQgb3V0cHV0ID0gJyc7XG4gIGxldCBjbGVhbk1zZyA9ICcnO1xuICBsZXQgbWVzc2FnZVRpbWUgPSBjaGFsay5kaW0oYCgke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9KWApO1xuICBsb2dnZXIuZGVidWcocmVzdWx0cyk7XG4gIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgbGV0IG1lc3NhZ2VzID0gcmVzdWx0Lm1lc3NhZ2VzO1xuICAgIGxldCB3YXJuaW5ncyA9IDA7XG4gICAgbGV0IGVycm9ycyA9IDA7XG4gICAgaWYgKCFtZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFibGVDb250ZW50cyA9IG1lc3NhZ2VzLm1hcChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgZnVuY3Rpb24gZ2V0TWVzc2FnZVR5cGUobXNnKSB7XG4gICAgICAgIGlmIChtc2cuZmF0YWwgfHwgbXNnLnNldmVyaXR5ID09PSAyKSB7XG4gICAgICAgICAgdG90YWxFcnJvcnMrKztcbiAgICAgICAgICBlcnJvcnMrKztcbiAgICAgICAgICByZXR1cm4gY2hhbGsucmVkKGMueCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b3RhbFdhcm5pbmdzKys7XG4gICAgICAgIHdhcm5pbmdzKys7XG4gICAgICAgIHJldHVybiBjaGFsay55ZWxsb3coYy5leCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbJycsXG4gICAgICAgIGdldE1lc3NhZ2VUeXBlKG1lc3NhZ2UpLFxuICAgICAgICBtZXNzYWdlLmxpbmUgfHwgMCxcbiAgICAgICAgbWVzc2FnZS5jb2x1bW4gfHwgMCxcbiAgICAgICAgY2hhbGsuZGltKG1lc3NhZ2UubWVzc2FnZS5yZXBsYWNlKC9cXC4kLywgJycpKSxcbiAgICAgICAgY2hhbGsuZGltKG1lc3NhZ2UucnVsZUlkIHx8ICcnKV07XG4gICAgfSk7XG5cbiAgICBjb25zdCB0YWJsZVRleHQgPSB0YWJsZSh0YWJsZUNvbnRlbnRzLCB0YWJsZVNldHRpbmdzKTtcblxuICAgIG91dHB1dCArPSBjaGFsay53aGl0ZS51bmRlcmxpbmUocmVzdWx0LmZpbGVQYXRoKSArIGAgKCR7Y2hhbGsucmVkKGVycm9ycyl9LyR7Y2hhbGsueWVsbG93KHdhcm5pbmdzKX0pJHtjLmVuZExpbmV9YDtcbiAgICBvdXRwdXQgKz0gdGFibGVUZXh0LnNwbGl0KGMuZW5kTGluZSkubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLnJlcGxhY2UoLyhcXGQrKVxccysoXFxkKykvLCAobSwgcDEsIHAyKSA9PiBjaGFsay5kaW0oYCR7cDF9OiR7cDJ9YCkpO1xuICAgIH0pLmpvaW4oYy5lbmRMaW5lKSArIGMuZW5kTGluZSArIGMuZW5kTGluZTtcbiAgfSk7XG5cbiAgaWYgKHRvdGFsRXJyb3JzKSB7XG4gICAgb3V0cHV0ICs9IGNoYWxrLnJlZChgJHtjLnh9ICR7dG90YWxFcnJvcnN9ICR7cGx1cmFsaXplKCdlcnJvcicsIHRvdGFsRXJyb3JzKX0gYCk7XG4gIH1cbiAgaWYgKHRvdGFsV2FybmluZ3MpIHtcbiAgICBvdXRwdXQgKz0gY2hhbGsueWVsbG93KGAke2MuZXh9ICR7dG90YWxXYXJuaW5nc30gJHtwbHVyYWxpemUoJ3dhcm5pbmcnLCB0b3RhbFdhcm5pbmdzKX0gYCk7XG4gIH1cblxuICBpZiAocmVzdWx0cy5sZW5ndGggPiAwIHx8ICFyZXN1bHRzLmxlbmd0aCkge1xuICAgIGNsZWFuTXNnID0gY2hhbGsuZ3JlZW4oYCR7Yy5jaGVja30gQ2xlYW5gKSArIGAgJHttZXNzYWdlVGltZX1gO1xuICB9XG5cbiAgb3V0cHV0ID0gKHRvdGFsRXJyb3JzIHx8IHRvdGFsV2FybmluZ3MpXG4gICAgPyBgJHtvdXRwdXR9JHttZXNzYWdlVGltZX0ke2MuZW5kTGluZX1gXG4gICAgOiBjbGVhbk1zZztcblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaW1wbGVEZXRhaWw7XG4iXX0=