"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _optionator = _interopRequireDefault(require("optionator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _help = _interopRequireDefault(require("./eslint/help"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('options');
logger.debug('Loaded');
const settings = {
  prepend: 'esw [options] [file.js ...] [dir ...]',
  concatRepeatedArrays: true,
  mergeRepeatedObjects: true
};
const myOptions = [{
  heading: 'Options'
}, {
  option: 'help',
  alias: 'h',
  type: 'Boolean',
  description: 'Show help'
}, {
  option: 'format',
  alias: 'f',
  type: 'String',
  default: 'simple-detail',
  description: 'Use a specific output format'
}, {
  option: 'watch',
  alias: 'w',
  type: 'Boolean',
  description: 'Enable file watch'
}, {
  option: 'changed',
  type: 'Boolean',
  description: 'Enables single file linting while watch is enabled'
}, {
  option: 'clear',
  type: 'Boolean',
  description: 'Clear terminal when running lint'
}, {
  option: 'esw-version',
  type: 'Boolean',
  description: 'Prints Eslint-Watch\'s Version'
}];
const eslintOptions = (0, _help.default)();

const newOptions = _lodash.default.union(myOptions, eslintOptions);

settings.options = newOptions;

var _default = (0, _optionator.default)(settings);

exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb25zLmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImRlYnVnIiwic2V0dGluZ3MiLCJwcmVwZW5kIiwiY29uY2F0UmVwZWF0ZWRBcnJheXMiLCJtZXJnZVJlcGVhdGVkT2JqZWN0cyIsIm15T3B0aW9ucyIsImhlYWRpbmciLCJvcHRpb24iLCJhbGlhcyIsInR5cGUiLCJkZXNjcmlwdGlvbiIsImRlZmF1bHQiLCJlc2xpbnRPcHRpb25zIiwibmV3T3B0aW9ucyIsIl8iLCJ1bmlvbiIsIm9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLFNBQVMscUJBQU8sU0FBUCxDQUFmO0FBQ0FBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBRUEsTUFBTUMsV0FBVztBQUNmQyxXQUFTLHVDQURNO0FBRWZDLHdCQUFzQixJQUZQO0FBR2ZDLHdCQUFzQjtBQUhQLENBQWpCO0FBTUEsTUFBTUMsWUFBWSxDQUFDO0FBQ2pCQyxXQUFTO0FBRFEsQ0FBRCxFQUVmO0FBQ0RDLFVBQVEsTUFEUDtBQUVEQyxTQUFPLEdBRk47QUFHREMsUUFBTSxTQUhMO0FBSURDLGVBQWE7QUFKWixDQUZlLEVBT2Y7QUFDREgsVUFBUSxRQURQO0FBRURDLFNBQU8sR0FGTjtBQUdEQyxRQUFNLFFBSEw7QUFJREUsV0FBUyxlQUpSO0FBS0RELGVBQWE7QUFMWixDQVBlLEVBYWY7QUFDREgsVUFBUSxPQURQO0FBRURDLFNBQU8sR0FGTjtBQUdEQyxRQUFNLFNBSEw7QUFJREMsZUFBYTtBQUpaLENBYmUsRUFrQmY7QUFDREgsVUFBUSxTQURQO0FBRURFLFFBQU0sU0FGTDtBQUdEQyxlQUFhO0FBSFosQ0FsQmUsRUFzQmY7QUFDREgsVUFBUSxPQURQO0FBRURFLFFBQU0sU0FGTDtBQUdEQyxlQUFhO0FBSFosQ0F0QmUsRUEwQmY7QUFDREgsVUFBUSxhQURQO0FBRURFLFFBQU0sU0FGTDtBQUdEQyxlQUFhO0FBSFosQ0ExQmUsQ0FBbEI7QUFnQ0EsTUFBTUUsZ0JBQWdCLG9CQUF0Qjs7QUFDQSxNQUFNQyxhQUFhQyxnQkFBRUMsS0FBRixDQUFRVixTQUFSLEVBQW1CTyxhQUFuQixDQUFuQjs7QUFDQVgsU0FBU2UsT0FBVCxHQUFtQkgsVUFBbkI7O2VBRWUseUJBQVdaLFFBQVgsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcHRpb25hdG9yIGZyb20gJ29wdGlvbmF0b3InO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IGdldE9wdGlvbnMgZnJvbSAnLi9lc2xpbnQvaGVscCc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyKCdvcHRpb25zJyk7XG5sb2dnZXIuZGVidWcoJ0xvYWRlZCcpO1xuXG5jb25zdCBzZXR0aW5ncyA9IHtcbiAgcHJlcGVuZDogJ2VzdyBbb3B0aW9uc10gW2ZpbGUuanMgLi4uXSBbZGlyIC4uLl0nLFxuICBjb25jYXRSZXBlYXRlZEFycmF5czogdHJ1ZSxcbiAgbWVyZ2VSZXBlYXRlZE9iamVjdHM6IHRydWVcbn07XG5cbmNvbnN0IG15T3B0aW9ucyA9IFt7XG4gIGhlYWRpbmc6ICdPcHRpb25zJ1xufSwge1xuICBvcHRpb246ICdoZWxwJyxcbiAgYWxpYXM6ICdoJyxcbiAgdHlwZTogJ0Jvb2xlYW4nLFxuICBkZXNjcmlwdGlvbjogJ1Nob3cgaGVscCdcbn0sIHtcbiAgb3B0aW9uOiAnZm9ybWF0JyxcbiAgYWxpYXM6ICdmJyxcbiAgdHlwZTogJ1N0cmluZycsXG4gIGRlZmF1bHQ6ICdzaW1wbGUtZGV0YWlsJyxcbiAgZGVzY3JpcHRpb246ICdVc2UgYSBzcGVjaWZpYyBvdXRwdXQgZm9ybWF0J1xufSwge1xuICBvcHRpb246ICd3YXRjaCcsXG4gIGFsaWFzOiAndycsXG4gIHR5cGU6ICdCb29sZWFuJyxcbiAgZGVzY3JpcHRpb246ICdFbmFibGUgZmlsZSB3YXRjaCdcbn0sIHtcbiAgb3B0aW9uOiAnY2hhbmdlZCcsXG4gIHR5cGU6ICdCb29sZWFuJyxcbiAgZGVzY3JpcHRpb246ICdFbmFibGVzIHNpbmdsZSBmaWxlIGxpbnRpbmcgd2hpbGUgd2F0Y2ggaXMgZW5hYmxlZCdcbn0sIHtcbiAgb3B0aW9uOiAnY2xlYXInLFxuICB0eXBlOiAnQm9vbGVhbicsXG4gIGRlc2NyaXB0aW9uOiAnQ2xlYXIgdGVybWluYWwgd2hlbiBydW5uaW5nIGxpbnQnXG59LCB7XG4gIG9wdGlvbjogJ2Vzdy12ZXJzaW9uJyxcbiAgdHlwZTogJ0Jvb2xlYW4nLFxuICBkZXNjcmlwdGlvbjogJ1ByaW50cyBFc2xpbnQtV2F0Y2hcXCdzIFZlcnNpb24nXG59XTtcblxuY29uc3QgZXNsaW50T3B0aW9ucyA9IGdldE9wdGlvbnMoKTtcbmNvbnN0IG5ld09wdGlvbnMgPSBfLnVuaW9uKG15T3B0aW9ucywgZXNsaW50T3B0aW9ucyk7XG5zZXR0aW5ncy5vcHRpb25zID0gbmV3T3B0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9uYXRvcihzZXR0aW5ncyk7XG4iXX0=