"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('arg-parser');
logger.debug('Loaded');
const simpleDetail = 'simple-detail';
const formatterPath = 'formatters';
const defaultPath = './';
const formatKey = '-f';
const keys = ['-w', '--watch', '--changed', '--clear', '--esw-version'];
const formats = ['simple', 'simple-success', simpleDetail];

function getPath(options) {
  logger.debug('GetPath: %s', options.format);

  const formatPath = _path.default.join(__dirname, formatterPath, options.format);

  logger.debug(formatPath);
  return formatPath;
}

;
var _default = {
  parse(cliArgs, options) {
    const dirs = options._;
    let formatSpecified = false;

    const args = _lodash.default.slice(cliArgs, 2, cliArgs.length);

    logger.debug('Directories to check: %o', dirs);
    logger.debug('Args %o', args);

    const arr = _lodash.default.without(_lodash.default.map(args, item => {
      if (!_lodash.default.includes(keys, item) && !_lodash.default.includes(formats, item)) {
        logger.debug('Pushing item: %s', item);
        return item;
      }

      if (_lodash.default.includes(formats, item)) {
        formatSpecified = true;
        logger.debug('Format specified');
        return getPath(options);
      }
    }), undefined);

    if (options.format === simpleDetail && !formatSpecified) {
      logger.debug('setting custom formatter');
      arr.push(formatKey);
      arr.push(getPath(options));
    }

    if (!dirs.length) {
      arr.push(defaultPath);
      logger.debug('Setting default path: %s', defaultPath);
    }

    return arr;
  }

};
exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcmctcGFyc2VyLmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImRlYnVnIiwic2ltcGxlRGV0YWlsIiwiZm9ybWF0dGVyUGF0aCIsImRlZmF1bHRQYXRoIiwiZm9ybWF0S2V5Iiwia2V5cyIsImZvcm1hdHMiLCJnZXRQYXRoIiwib3B0aW9ucyIsImZvcm1hdCIsImZvcm1hdFBhdGgiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInBhcnNlIiwiY2xpQXJncyIsImRpcnMiLCJfIiwiZm9ybWF0U3BlY2lmaWVkIiwiYXJncyIsInNsaWNlIiwibGVuZ3RoIiwiYXJyIiwid2l0aG91dCIsIm1hcCIsIml0ZW0iLCJpbmNsdWRlcyIsInVuZGVmaW5lZCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7OztBQUVBLE1BQU1BLFNBQVMscUJBQU8sWUFBUCxDQUFmO0FBQ0FBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBRUEsTUFBTUMsZUFBZSxlQUFyQjtBQUNBLE1BQU1DLGdCQUFnQixZQUF0QjtBQUVBLE1BQU1DLGNBQWMsSUFBcEI7QUFDQSxNQUFNQyxZQUFZLElBQWxCO0FBQ0EsTUFBTUMsT0FBTyxDQUNYLElBRFcsRUFFWCxTQUZXLEVBR1gsV0FIVyxFQUlYLFNBSlcsRUFLWCxlQUxXLENBQWI7QUFPQSxNQUFNQyxVQUFVLENBQ2QsUUFEYyxFQUVkLGdCQUZjLEVBR2RMLFlBSGMsQ0FBaEI7O0FBTUEsU0FBU00sT0FBVCxDQUFpQkMsT0FBakIsRUFBMEI7QUFDeEJULFNBQU9DLEtBQVAsQ0FBYSxhQUFiLEVBQTRCUSxRQUFRQyxNQUFwQzs7QUFDQSxRQUFNQyxhQUFhQyxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUJYLGFBQXJCLEVBQW9DTSxRQUFRQyxNQUE1QyxDQUFuQjs7QUFDQVYsU0FBT0MsS0FBUCxDQUFhVSxVQUFiO0FBQ0EsU0FBT0EsVUFBUDtBQUNEOztBQUFBO2VBRWM7QUFDYkksUUFBTUMsT0FBTixFQUFlUCxPQUFmLEVBQXdCO0FBQ3RCLFVBQU1RLE9BQU9SLFFBQVFTLENBQXJCO0FBQ0EsUUFBSUMsa0JBQWtCLEtBQXRCOztBQUNBLFVBQU1DLE9BQU9GLGdCQUFFRyxLQUFGLENBQVFMLE9BQVIsRUFBaUIsQ0FBakIsRUFBb0JBLFFBQVFNLE1BQTVCLENBQWI7O0FBQ0F0QixXQUFPQyxLQUFQLENBQWEsMEJBQWIsRUFBeUNnQixJQUF6QztBQUNBakIsV0FBT0MsS0FBUCxDQUFhLFNBQWIsRUFBd0JtQixJQUF4Qjs7QUFDQSxVQUFNRyxNQUFNTCxnQkFBRU0sT0FBRixDQUFVTixnQkFBRU8sR0FBRixDQUFNTCxJQUFOLEVBQWFNLElBQUQsSUFBVTtBQUMxQyxVQUFJLENBQUNSLGdCQUFFUyxRQUFGLENBQVdyQixJQUFYLEVBQWlCb0IsSUFBakIsQ0FBRCxJQUEyQixDQUFDUixnQkFBRVMsUUFBRixDQUFXcEIsT0FBWCxFQUFvQm1CLElBQXBCLENBQWhDLEVBQTJEO0FBQ3pEMUIsZUFBT0MsS0FBUCxDQUFhLGtCQUFiLEVBQWlDeUIsSUFBakM7QUFDQSxlQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsVUFBSVIsZ0JBQUVTLFFBQUYsQ0FBV3BCLE9BQVgsRUFBb0JtQixJQUFwQixDQUFKLEVBQStCO0FBQzdCUCwwQkFBa0IsSUFBbEI7QUFDQW5CLGVBQU9DLEtBQVAsQ0FBYSxrQkFBYjtBQUNBLGVBQU9PLFFBQVFDLE9BQVIsQ0FBUDtBQUNEO0FBQ0YsS0FWcUIsQ0FBVixFQVVSbUIsU0FWUSxDQUFaOztBQVlBLFFBQUluQixRQUFRQyxNQUFSLEtBQW1CUixZQUFuQixJQUFtQyxDQUFDaUIsZUFBeEMsRUFBeUQ7QUFDdkRuQixhQUFPQyxLQUFQLENBQWEsMEJBQWI7QUFDQXNCLFVBQUlNLElBQUosQ0FBU3hCLFNBQVQ7QUFDQWtCLFVBQUlNLElBQUosQ0FBU3JCLFFBQVFDLE9BQVIsQ0FBVDtBQUNEOztBQUNELFFBQUksQ0FBQ1EsS0FBS0ssTUFBVixFQUFrQjtBQUNoQkMsVUFBSU0sSUFBSixDQUFTekIsV0FBVDtBQUNBSixhQUFPQyxLQUFQLENBQWEsMEJBQWIsRUFBeUNHLFdBQXpDO0FBQ0Q7O0FBQ0QsV0FBT21CLEdBQVA7QUFDRDs7QUE3QlksQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IExvZ2dlcignYXJnLXBhcnNlcicpO1xubG9nZ2VyLmRlYnVnKCdMb2FkZWQnKTtcblxuY29uc3Qgc2ltcGxlRGV0YWlsID0gJ3NpbXBsZS1kZXRhaWwnO1xuY29uc3QgZm9ybWF0dGVyUGF0aCA9ICdmb3JtYXR0ZXJzJztcblxuY29uc3QgZGVmYXVsdFBhdGggPSAnLi8nO1xuY29uc3QgZm9ybWF0S2V5ID0gJy1mJztcbmNvbnN0IGtleXMgPSBbXG4gICctdycsXG4gICctLXdhdGNoJyxcbiAgJy0tY2hhbmdlZCcsXG4gICctLWNsZWFyJyxcbiAgJy0tZXN3LXZlcnNpb24nXG5dO1xuY29uc3QgZm9ybWF0cyA9IFtcbiAgJ3NpbXBsZScsXG4gICdzaW1wbGUtc3VjY2VzcycsXG4gIHNpbXBsZURldGFpbFxuXTtcblxuZnVuY3Rpb24gZ2V0UGF0aChvcHRpb25zKSB7XG4gIGxvZ2dlci5kZWJ1ZygnR2V0UGF0aDogJXMnLCBvcHRpb25zLmZvcm1hdCk7XG4gIGNvbnN0IGZvcm1hdFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBmb3JtYXR0ZXJQYXRoLCBvcHRpb25zLmZvcm1hdCk7XG4gIGxvZ2dlci5kZWJ1Zyhmb3JtYXRQYXRoKTtcbiAgcmV0dXJuIGZvcm1hdFBhdGg7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHBhcnNlKGNsaUFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkaXJzID0gb3B0aW9ucy5fO1xuICAgIGxldCBmb3JtYXRTcGVjaWZpZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhcmdzID0gXy5zbGljZShjbGlBcmdzLCAyLCBjbGlBcmdzLmxlbmd0aCk7XG4gICAgbG9nZ2VyLmRlYnVnKCdEaXJlY3RvcmllcyB0byBjaGVjazogJW8nLCBkaXJzKTtcbiAgICBsb2dnZXIuZGVidWcoJ0FyZ3MgJW8nLCBhcmdzKTtcbiAgICBjb25zdCBhcnIgPSBfLndpdGhvdXQoXy5tYXAoYXJncywgKGl0ZW0pID0+IHtcbiAgICAgIGlmICghXy5pbmNsdWRlcyhrZXlzLCBpdGVtKSAmJiAhXy5pbmNsdWRlcyhmb3JtYXRzLCBpdGVtKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ1B1c2hpbmcgaXRlbTogJXMnLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgICBpZiAoXy5pbmNsdWRlcyhmb3JtYXRzLCBpdGVtKSkge1xuICAgICAgICBmb3JtYXRTcGVjaWZpZWQgPSB0cnVlO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0Zvcm1hdCBzcGVjaWZpZWQnKTtcbiAgICAgICAgcmV0dXJuIGdldFBhdGgob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSksIHVuZGVmaW5lZCk7XG5cbiAgICBpZiAob3B0aW9ucy5mb3JtYXQgPT09IHNpbXBsZURldGFpbCAmJiAhZm9ybWF0U3BlY2lmaWVkKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ3NldHRpbmcgY3VzdG9tIGZvcm1hdHRlcicpO1xuICAgICAgYXJyLnB1c2goZm9ybWF0S2V5KTtcbiAgICAgIGFyci5wdXNoKGdldFBhdGgob3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoIWRpcnMubGVuZ3RoKSB7XG4gICAgICBhcnIucHVzaChkZWZhdWx0UGF0aCk7XG4gICAgICBsb2dnZXIuZGVidWcoJ1NldHRpbmcgZGVmYXVsdCBwYXRoOiAlcycsIGRlZmF1bHRQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxufTtcbiJdfQ==